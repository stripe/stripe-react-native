---
format_version: '11'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: react-native

app:
  envs:
  - BITRISE_PROJECT_PATH: example/ios/example.xcworkspace
  - BITRISE_SCHEME: example
  - BITRISE_EXPORT_METHOD: development
  - MAESTRO_CLI_ANALYSIS_NOTIFICATION_DISABLED: true
  - MAESTRO_DRIVER_STARTUP_TIMEOUT: 300000

trigger_map:
- push_branch: master
  pipeline: main-trigger-pipeline
- pull_request_source_branch: releases/*
  pipeline: releases-trigger-pipeline
- pull_request_source_branch: '*'
  pipeline: main-trigger-pipeline

pipelines:
  main-trigger-pipeline:
    stages:
    - stage-trigger-run-all: {}
  releases-trigger-pipeline:
    stages:
    - stage-releases-run-all: {}
  nightly-pipeline:
    stages:
    - stage-nightly-all: {}

stages:
  stage-trigger-run-all:
    workflows:
    - js_tests: {}
    - unit_tests_ios: {}
    - unit_tests_android: {}
    - e2e_tests_ios: {}
    - e2e_tests_android: {}
  stage-releases-run-all:
    workflows:
    - js_tests: {}
    - unit_tests_ios: {}
    - unit_tests_android: {}
    - e2e_tests_ios: {}
    - e2e_tests_android: {}
    - generate_docs: {}
  stage-nightly-all:
    workflows:
    - e2e_tests_ios: {}
    - e2e_tests_android: {}

workflows:

  js_tests:
    description: JavaScript/TypeScript tests and linting
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@8: {}
    - restore-cache@1:
        inputs:
        - key: 'yarn-{{ checksum "yarn.lock" }}'
        - verbose: true
    - nodejs@1:
        inputs:
        - node_version: '20.19.4'
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            # Clear yarn cache to prevent corruption
            yarn cache clean --force
            # Install dependencies
            yarn bootstrap-no-pods
        title: Install Dependencies
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            yarn typescript
        title: Run TypeScript check
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            yarn lint
        title: Run ESLint
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            yarn test
        title: Run Jest tests
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            cd example
            yarn typescript
        title: Run example TypeScript check
    - deploy-to-bitrise-io@2: {}
    - save-cache@1:
        inputs:
        - key: 'yarn-{{ checksum "yarn.lock" }}'
        - paths: |-
            ~/.yarn
            node_modules
            example/node_modules
    after_run:
    - notify_ci
    meta:
      bitrise.io:
        stack: osx-xcode-16.4.x
        machine_type_id: g2.mac.large

  unit_tests_ios:
    description: iOS unit tests
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@8: {}
    - restore-cache@1:
        inputs:
        - key: 'pods-{{ checksum "example/ios/Podfile.lock" }}'
        - verbose: true
    - nodejs@1:
        inputs:
        - node_version: '20.19.4'
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            # Clear yarn cache to prevent corruption
            yarn cache clean --force
            # Install dependencies and pods
            yarn bootstrap
        title: Install Dependencies
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            yarn test:unit:ios
        title: Run iOS unit tests
    - deploy-to-bitrise-io@2: {}
    - save-cache@1:
        inputs:
        - key: 'pods-{{ checksum "example/ios/Podfile.lock" }}'
        - paths: |-
            example/ios/Pods
            ~/.cocoapods
    after_run:
    - notify_ci
    meta:
      bitrise.io:
        stack: osx-xcode-16.4.x
        machine_type_id: g2.mac.large

  unit_tests_android:
    description: Android unit tests and formatting check
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@8: {}
    - restore-cache@1:
        inputs:
        - key: 'android-{{ checksum "example/android/build.gradle" }}'
        - verbose: true
    - nodejs@1:
        inputs:
        - node_version: '20.19.4'
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            # Clear yarn cache to prevent corruption
            yarn cache clean --force
            # Install dependencies
            yarn bootstrap-no-pods
        title: Install Dependencies
    - install-missing-android-tools@3:
        inputs:
        - gradlew_path: example/android/gradlew
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            yarn format:android:check
        title: Check Android code formatting
    - android-unit-test@1:
        inputs:
        - project_location: example/android
        - module: app
        - variant: debug
    - deploy-to-bitrise-io@2: {}
    - save-cache@1:
        inputs:
        - key: 'android-{{ checksum "example/android/build.gradle" }}'
        - paths: |-
            ~/.gradle
            example/android/.gradle
    after_run:
    - notify_ci
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: standard

  e2e_tests_ios:
    description: iOS E2E tests with enhanced debugging and cache management
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@8: {}
    - restore-cache@1:
        inputs:
        - key: 'ios-e2e-{{ checksum "example/ios/Podfile.lock" }}'
        - verbose: true
    - nodejs@1:
        inputs:
        - node_version: '20.19.4'
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            # Clear yarn cache to prevent corruption
            yarn cache clean --force
            # Install dependencies
            yarn bootstrap-no-pods
        title: Install Dependencies
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            yarn example build:ios
        title: Generate iOS bundle
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            cd example
            # Clean everything to force fresh auto-linking resolution
            rm -rf ios/Pods ios/Podfile.lock ios/build node_modules/.generated
            # Force react-native-test-app to regenerate project configuration
            rm -rf ios/example.xcworkspace
            cd ..
            yarn pods
            # Verify the test app workspace was regenerated
            ls -la example/ios/example.xcworkspace
        title: Install Pods with react-native-test-app auto-linking fix
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            curl -Ls "https://get.maestro.mobile.dev" | bash
            echo "${HOME}/.maestro/bin" >> $BITRISE_PROFILE
            source $BITRISE_PROFILE
        title: Install Maestro CLI
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            echo "Available iOS simulators:"
            xcrun simctl list devices
        title: List available iOS simulators
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            cd example/ios
            # Clean build caches to prevent module cache corruption
            rm -rf ~/Library/Developer/Xcode/DerivedData/* || true
            rm -rf ~/Library/Caches/com.apple.dt.Xcode/* || true
            rm -rf build/ || true
            rm -rf .generated/ || true
            # Clean the workspace
            xcodebuild clean -workspace example.xcworkspace -scheme example || true
        title: Clean build caches and regenerate
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            # Build iOS app in Debug mode to avoid Release build issues
            yarn run-example-ios:release
        title: Build iOS App (Debug Mode)
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            source $BITRISE_PROFILE
            yarn test:e2e:ios
        title: Run iOS E2E tests
    - deploy-to-bitrise-io@2:
        inputs:
        - deploy_path: e2e-artifacts
        - is_compress: true
        title: Upload E2E artifacts
    - slack@3:
        run_if: ".IsBuildFailed"
        inputs:
        - webhook_url: "$SLACK_RUN_CHANNEL_WEBHOOK_URL"
        - text: |-
            *E2E iOS Test Failed*
            See details: $BITRISE_BUILD_URL
    - save-cache@1:
        inputs:
        - key: 'ios-e2e-{{ checksum "example/ios/Podfile.lock" }}'
        - paths: |-
            example/ios/Pods
            ~/.cocoapods
    after_run:
    - notify_ci
    meta:
      bitrise.io:
        stack: osx-xcode-16.4.x
        machine_type_id: g2.mac.4large

  e2e_tests_android:
    description: Android E2E tests
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@8: {}
    - restore-cache@1:
        inputs:
        - key: 'android-e2e-{{ checksum "example/android/build.gradle" }}'
        - verbose: true
    - nodejs@1:
        inputs:
        - node_version: '20.19.4'
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            # Clear yarn cache to prevent corruption
            yarn cache clean --force
            # Install dependencies
            yarn bootstrap-no-pods
        title: Install Dependencies
    - install-missing-android-tools@3:
        inputs:
        - gradlew_path: example/android/gradlew
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            curl -Ls "https://get.maestro.mobile.dev" | bash
            echo "${HOME}/.maestro/bin" >> $BITRISE_PROFILE
            source $BITRISE_PROFILE
        title: Install Maestro CLI
    - avd-manager@1:
        inputs:
        - api_level: '33'
        - tag: google_apis
        - abi: x86_64
        - profile: Galaxy Nexus
        - emulator_id: test
    - wait-for-android-emulator@1:
        inputs:
        - emulator_id: test
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            # Wait for system to settle
            adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done'
            # Retry once if necessary
            yarn run-example-android:release || (sleep 60 && yarn run-example-android:release)
            source $BITRISE_PROFILE
            yarn test:e2e:android
        title: Run Android E2E tests
    - deploy-to-bitrise-io@2:
        inputs:
        - deploy_path: e2e-artifacts
        - is_compress: true
        title: Upload E2E artifacts
    - slack@3:
        run_if: ".IsBuildFailed"
        inputs:
        - webhook_url: "$SLACK_RUN_CHANNEL_WEBHOOK_URL"
        - text: |-
            *E2E Android Test Failed*
            See details: $BITRISE_BUILD_URL
    - save-cache@1:
        inputs:
        - key: 'android-e2e-{{ checksum "example/android/build.gradle" }}'
        - paths: |-
            ~/.gradle
            example/android/.gradle
    after_run:
    - notify_ci
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: elite

  generate_docs:
    description: Generate and deploy documentation to GitHub Pages
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@8: {}
    - restore-cache@1:
        inputs:
        - key: 'docs-{{ checksum "package.json" }}'
        - verbose: true
    - nodejs@1:
        inputs:
        - node_version: '20.19.4'
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            # Clear yarn cache to prevent corruption
            yarn cache clean --force
            # Install dependencies
            yarn example && yarn
        title: Install Dependencies
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            yarn docs
        title: Build docs
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            git config --global user.email "ci@bitrise.io"
            git config --global user.name "Bitrise CI"

            # Create temporary directory for gh-pages
            mkdir -p /tmp/gh-pages
            cp -r ./docs/* /tmp/gh-pages/

            # Switch to gh-pages branch
            git checkout --orphan gh-pages
            git rm -rf .

            # Copy docs to root
            cp -r /tmp/gh-pages/* .

            # Add and commit
            git add .
            git commit -m "docs: update documentation"

            # Push to gh-pages branch
            git push -f origin gh-pages
        title: Deploy to GitHub Pages
        run_if: '{{getenv "GITHUB_TOKEN" | ne ""}}'
    - save-cache@1:
        inputs:
        - key: 'docs-{{ checksum "package.json" }}'
        - paths: |-
            ~/.yarn
            node_modules
            example/node_modules
    after_run:
    - notify_ci
    meta:
      bitrise.io:
        stack: osx-xcode-16.4.x
        machine_type_id: g2.mac.large

  notify_ci:
    description: Send notification if workflow failed
    steps:
    - slack@3:
        is_always_run: true
        run_if: .IsBuildFailed
        inputs:
        - webhook_url: $SLACK_RUN_CHANNEL_WEBHOOK_URL
        - webhook_url_on_error: $SLACK_RUN_CHANNEL_WEBHOOK_URL
        - text_on_error: |-
            *React Native CI Build Failed*
            Pipeline: $BITRISE_TRIGGERED_WORKFLOW_ID
            Branch: $BITRISE_GIT_BRANCH
            Commit: $BITRISE_GIT_MESSAGE
            See details: $BITRISE_BUILD_URL

meta:
  bitrise.io:
    stack: osx-xcode-16.4.x
    machine_type_id: g2.mac.4large
